<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprGameController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>infPower = false;
fadeIn = true;
iieieie = 1.0;
fadeOut = false;
drawEndGUI = false;
powerups[0] = false;
powerups[1] = false;
powerups[2] = false;
extraJumpTime = 0;
aaaaaaaaaaa = 0;
rhgeehe="";
enemyWon = false;
prefix = "";
enemyCount = 0;
names = ds_list_create();
prefixes = ds_list_create();
eeeeee = 0;
randomize();
gameEnd = false;
size = 41;
topBarAlpha = 0;
gameGrid = ds_grid_create(size,size);
for(var i = 0; i &lt; size; i++)
{
    for(var j = 0; j &lt; size;j++)
    {
        gameGrid[# i,j] = instance_create(i*64  + 32,j*64 +32,objCell);
        
        gameGrid[# i,j].i =i;
        gameGrid[# i,j].j = j;
        /*
        if (irandom(2) == 0)
        {
            cell = gameGrid[# i,j];
            cell.platform = instance_create(cell.x, cell.y, objPlatform);
            cell.platform.depth = -1-i;
        }
        */
        
    }
}

pass[0] = false;
pass[1] = false;
pass[2] = false;
pass[3] = false;

ds_list_add(names,"Ogoter");
ds_list_add(names,"Hartswimmer");
ds_list_add(names,"Gutierphira");
ds_list_add(names,"Andersonievous");
ds_list_add(names,"Hallola");
ds_list_add(names,"Morrisontoadie");
ds_list_add(names,"Masonical");
ds_list_add(names,"Whizoga");
ds_list_add(names,"Visertorres");
ds_list_add(names,"Reegatia");
ds_list_add(names,"Brainsross");
ds_list_add(names,"Bukatler");
ds_list_add(names,"Broomnes");
ds_list_add(names,"Cooya");
ds_list_add(names,"Smythkora");
ds_list_add(names,"Powellwalker");
ds_list_add(names,"Hugherita");
ds_list_add(names,"Pafoot");
ds_list_add(names,"Knightdazzle");
ds_list_add(names,"Cladall");
ds_list_add(names,"Grindylmes");
ds_list_add(names,"Fangnald");
ds_list_add(names,"Claroshark");
ds_list_add(names,"Ifrker");
ds_list_add(names,"Gutierretha");
ds_list_add(names,"Neyrker");
ds_list_add(names,"Taylorcrusha");
ds_list_add(names,"Rafirebreatha");
ds_list_add(names,"Wootwinkle");
ds_list_add(names,"Cheekpalmer");
ds_list_add(names,"Danabla");
ds_list_add(names,"Abalyan");
ds_list_add(names,"Ifera");
ds_list_add(names,"Kramter");
ds_list_add(names,"Poganta");
ds_list_add(names,"Bigklin");
ds_list_add(names,"Grubbymyer");
ds_list_add(names,"Onowhite");
ds_list_add(names,"Robertsoniona");
ds_list_add(names,"Mordazzle");
ds_list_add(names,"Rottowart");
ds_list_add(names,"Lobstrosders");
ds_list_add(names,"Leeknee");
ds_list_add(names,"Bakeravaca");
ds_list_add(names,"Gogmarper");
ds_list_add(names,"Azmez");
ds_list_add(names,"Stinkchell");
ds_list_add(names,"Mooregmagogv");
ds_list_add(names,"Thomatrouble");
ds_list_add(names,"Rodriguep");
ds_list_add(names,"Betrayhawkins");
ds_list_add(names,"Catopus");
ds_list_add(names,"Grrrren");
ds_list_add(names,"Kellyclop");
ds_list_add(names,"Andersonoddy");
ds_list_add(names,"Supermason");
ds_list_add(names,"Harteth");
ds_list_add(names,"Stewariniar");
ds_list_add(names,"Wardswimmer");
ds_list_add(names,"Rottolawrence");
ds_list_add(names,"Maletorres");
ds_list_add(names,"Mischiery");
ds_list_add(names,"Jarrobinson");
ds_list_add(names,"Harrisonbell");
ds_list_add(names,"Scrwells");
ds_list_add(names,"Stewartkor");


ds_list_add(prefixes,"Legendary");
ds_list_add(prefixes,"Cheesy");
ds_list_add(prefixes,"Almighty");
ds_list_add(prefixes,"Wicked");
ds_list_add(prefixes,"Righteous");
ds_list_add(prefixes,"Kind");
ds_list_add(prefixes,"Victorious");
ds_list_add(prefixes,"Beefy");
ds_list_add(prefixes,"Crackalakin");
ds_list_add(prefixes,"Recapitated");
ds_list_add(prefixes,"Wild");
ds_list_add(prefixes,"Double Agent");
ds_list_add(prefixes,"Crusty");
ds_list_add(prefixes,"Buggy");
ds_list_add(prefixes,"Snazzy");

/*
ps = part_system_create();
particleStones = part_type_create();
part_type_shape(particleStones,pt_shape_pixel);
part_type_size(particleStones,1,2,0,0);
part_type_scale(particleStones,1,1);
part_type_color1(particleStones,3487029);
part_type_alpha2(particleStones,1,0);
part_type_speed(particleStones,2,3,0,0);
part_type_direction(particleStones,70,110,0,0);
part_type_gravity(particleStones,0.20,270);
part_type_orientation(particleStones,0,0,0,0,1);
part_type_blend(particleStones,0);
part_type_life(particleStones,60,60);

*/






prefix = prefixes[| irandom(ds_list_size(prefixes)-1)];
logMessage = "The game is on for the " + prefix +" Player";
/*
playerCell = gameGrid[# irandom(size-1),irandom(size-1)];
playerCell.player = instance_create(playerCell.x,playerCell.y,objPlayer);
if(playerCell.platform == 0)
{
    playerCell.platform = instance_create(playerCell.x, playerCell.y, objPlatform);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>aaaaaaaaaaa++;
eeeeee+= 1/room_speed;

if (infPower)
{
powerups[0] = true;
powerups[1] = true;
powerups[2] = true;
}

if (irandom(25) == 0 &amp;&amp; !gameEnd)
{
    var pickX = irandom(size-1);
    var pickY = irandom(size-1);
    
    var cell = gameGrid[# pickX, pickY];
    
    if (cell.validForLanding &amp;&amp; cell.platform != 0 &amp;&amp; cell.powerup == 0)
    {
        cell.powerup = instance_create(cell.x,cell.y, objBluePowerup);
    }
}
if (irandom(25) == 0 &amp;&amp; !gameEnd)
{
    var pickX = irandom(size-1);
    var pickY = irandom(size-1);
    
    var cell = gameGrid[# pickX, pickY];
    
    if (cell.validForLanding &amp;&amp; cell.platform != 0 &amp;&amp; cell.powerup == 0)
    {
        cell.powerup = instance_create(cell.x,cell.y, objBuilderPowerup);
    }
}

if (irandom(25) == 0 &amp;&amp; !gameEnd)
{
    var pickX = irandom(size-1);
    var pickY = irandom(size-1);
    
    var cell = gameGrid[# pickX, pickY];
    
    if (cell.validForLanding &amp;&amp; cell.platform != 0 &amp;&amp; cell.powerup == 0)
    {
        cell.powerup = instance_create(cell.x,cell.y, objJumpPowerup);
    }
}

if (drawEndGUI &amp;&amp; topBarAlpha &lt; 0.99)
{
    topBarAlpha+= 0.05;
}

if (enemyCount &gt;= 1 &amp;&amp; (!instance_exists(objPlayer) || objPlayer.dead))
{
    drawEndGUI = true;
    enemyWon = true;
}

if (!gameEnd &amp;&amp; ((instance_exists(objPlayer) &amp;&amp; !objPlayer.dead &amp;&amp; enemyCount == 0) || (
    enemyCount == 1 &amp;&amp; (!instance_exists(objPlayer) || objPlayer.dead))))
{
gameEnd = true;
drawEndGUI=true;

        if(instance_exists(objEnemyBot))
        {
            with(objEnemyBot)
            {
                instance_destroy();
            }
        }
    if (enemyCount &gt; 0)
    {
    /*
        with(objEnemyBot) {
            if(dead) instance_destroy();
        }
        *
        var enemy = instance_find(objEnemyBot,1);
        enemy.gravity = 0;
        enemy.speed = 0;
        enemy.vspeed = 0;
        enemy.hspeed = 0;
        enemy.depth = -109;
        enemy.image_xscale = 1;
        enemy.image_yscale = 1;
        enemy.scaleModifier = 0;
        enemy.image_alpha = 1;
        enemy.fadeAnimAlpha = 1;*/
        //logMessage = enemy.name + " has defeated all their opponents";
        
        logMessage = objGameController.prefix + " Player failed to defeated their enemies";
        //rhgeehe = enemy.name;
        /*
        objCamera.weogtjeriojgi = enemy;
        with(objCamera)
        {
            view_wview[0] = width;
            view_hview[0] = height;
            
            view_xview[0] = weogtjeriojgi.x - (view_wview[0]/2);
            view_yview[0] = weogtjeriojgi.y - (view_hview[0]/2);
        }*/enemyWon = true;
    }
    else
    {
        objPlayer.inputLock = true;
        audio_play_sound(sndWin,0,false);
        logMessage = objGameController.prefix + " Player has dominated the field";
    }
}


if (gameEnd &amp;&amp; !enemyWon &amp;&amp; keyboard_check_pressed(vk_space))
{

audio_play_sound(sndMenu,0,false);
    fadeOut = true;
}

if (room ==rLevel2 &amp;&amp; gameEnd &amp;&amp; !enemyWon)
{
    if(keyboard_check_pressed(ord("1")) &amp;&amp; !pass[0])
    {
    
audio_play_sound(sndMenu,0,false);
        pass[0] = true;
    }
    else if (keyboard_check_pressed(ord("1")) &amp;&amp; pass[0])
    {
        pass[0] = false;
        pass[1] = false;
        pass[2] = false;
        pass[3] = false;
    }
    else if(keyboard_check_pressed(ord("3")) &amp;&amp; pass[0] &amp;&amp; !pass[1])
    {
    
audio_play_sound(sndMenu,0,false);
        pass[1] = true;
    }
    else if (keyboard_check_pressed(ord("3")) &amp;&amp; (!pass[0] || pass[1]))
    {
        pass[0] = false;
        pass[1] = false;
        pass[2] = false;
        pass[3] = false;
    }
     else if(keyboard_check_pressed(ord("7")) &amp;&amp; pass[1] &amp;&amp; !pass[2])
    {
    
audio_play_sound(sndMenu,0,false);
        pass[2] = true;
    }
    else if (keyboard_check_pressed(ord("7")) &amp;&amp; (!pass[0] || !pass[1] || pass[2]))
    {
        pass[0] = false;
        pass[1] = false;
        pass[2] = false;
        pass[3] = false;
    }
    else if(keyboard_check_pressed(ord("9")) &amp;&amp; pass[2] &amp;&amp; !pass[3])
    {
    
audio_play_sound(sndMenu,0,false);
        pass[3] = true;
    }
    else if (keyboard_check_pressed(ord("9")) &amp;&amp; (!pass[0] || !pass[1] || !pass[2] ||pass[3]))
    {
        pass[0] = false;
        pass[1] = false;
        pass[2] = false;
        pass[3] = false;
    }
}


if (fadeIn &amp;&amp; iieieie &gt;= 0.01)
{
iieieie -= 0.04;
}
else if (fadeIn &amp;&amp; iieieie &lt;= 0.01)
{
fadeIn = false;
}

if (fadeOut &amp;&amp; iieieie &lt; 0.99)
{
iieieie += 0.04;
}
else if (fadeOut &amp;&amp; iieieie &gt;= 0.99)
{
fadeOut = false;

if (room == rLevel2)
{
if (pass[3])
{
room_goto(rSecret);
}
else
room_goto(rEnd)
}
else
room_goto_next();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(sprGUIBg,0,0,view_hport[0],view_wport[0],1,0,c_white,1.0);

if (instance_exists(objPlayer) &amp;&amp; !objPlayer.dead &amp;&amp; !gameEnd)
{
draw_sprite_ext(sprGUIPanel,0,view_wport[0]/2, view_hport[0],1,1,0,c_white,1);

if (powerups[0])
{
    draw_sprite_ext(sprPowerupBuilder,0,view_wport[0]/2 - 40 -4, view_hport[0]- 16+ sin(objGameController.aaaaaaaaaaa* 0.025),1,1,0,c_white,0.7); 
}

if (powerups[1])
{
    draw_sprite_ext(sprBluePowerup,0,view_wport[0]/2 , view_hport[0] -16+ sin(objGameController.aaaaaaaaaaa* 0.025),1,1,0,c_white,1); 
}

if (powerups[2])
{
    draw_sprite_ext(sprJumpPowerup,1,view_wport[0]/2 + 40 +4, view_hport[0]-12+ sin(objGameController.aaaaaaaaaaa* 0.025),0.85,0.85,0,c_white,0.7); 
}

if (extraJumpTime &gt; 0)
{
    draw_rectangle_colour(10,view_hport[0]-10,10+200 * (extraJumpTime / 600),view_hport[0]-20,c_green,c_green,c_green,c_green,false);
}

draw_set_font(ftLog);
draw_set_halign(fa_right);
draw_set_valign(fa_middle);
draw_set_color(c_white);
draw_text(view_wport[0] - 10, view_hport[0] - 15, logMessage);
}
else
{
draw_set_font(ftLog);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_color(c_white);
draw_text(view_wport[0]/2, view_hport[0] - 15, logMessage);
}

if (drawEndGUI)
{
draw_sprite_ext(sprGUIBg,0,0,0,view_wport[0],-6,0,c_white,topBarAlpha);
draw_set_font(ftEnd);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
    if (enemyWon)
    {
    draw_set_color(make_colour_rgb(198,40,40));
    draw_text(view_wport[0]/2, 50, "LEVEL FAILED");
    draw_set_font(ftName);
    draw_text(view_wport[0]/2, 70, "Press R to Try Again");
    }
    else
    {
    draw_set_color(make_colour_rgb(46,125,50));
    draw_text(view_wport[0]/2, 50, "LEVEL COMPLETED");
    draw_set_font(ftName);
    draw_text(view_wport[0]/2, 70, "Press Space to Continue");
    }
}

draw_sprite_ext(sprBlack,0,0,0,view_wport[0],view_hport[0],0,c_white,iieieie);



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
audio_play_sound(sndMenu,0,false);
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="80">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>infPower = !infPower;

if (infPower)
{
audio_play_sound(sndPickup,0,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
